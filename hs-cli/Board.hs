module Board
       where

import Data.Array.IArray
import Data.Char
import Data.Word
import Data.List
import qualified Data.Set as S
import Data.Tree.Game_tree.Game_tree
import Data.Tree.Game_tree.Negascout

-- Interpreted as:
-- 255 out of bounds
-- 0 empty
-- 1:6 player pegs
type Player = Word8
type Board = (Array Int Player, Array Player [Int])

newtype BNode = BNode (Word8,Int,Board) 

type Move = (Int,Int,[Int])

oP p = p `mod` 2 + 1

instance Game_tree BNode where
    is_terminal (BNode (pl,depth, board)) | even depth = totalDistance pl board == -196
                                          | otherwise = totalDistance (oP pl) board == -196
    node_value (BNode (pl,depth, board)) | odd depth = let s = totalDistance pl board
                                                        in if s == -196 then 1000000 `div` depth else s
                                         | otherwise  = let s = negate $ totalDistance (oP pl) board
                                                        in if s == 196 then -1000000 `div` depth else s
    children (BNode (pl, depth, board))
        | odd depth = map (\m -> BNode (pl, depth+1, move board m)) $ legalMoves (oP pl) board
        | otherwise  = map (\m -> BNode (pl, depth+1, move board m)) $ legalMoves pl board

parseDistance :: String -> Array Int (Array Int Int)
parseDistance s = let strings = lines $ filter (not.isSeparator) s
                      fixedStrings = fixDist strings
                  in listArray (0,5) $ map (\s -> listArray (0,288) (read s)) fixedStrings

fixDist :: [String] -> [String]
fixDist [last] = let s = init $ tail last
                 in ["[" ++ s ++ "]"]
fixDist (ps:ss) = let s = tail ps
                      n = length s
                      s' = take (n-2) s
                  in ("[" ++ s' ++ "]") : fixDist ss

findMove :: Player -> String -> [(Int, Move)]
findMove player boardStr = let
  board = parseBoard boardStr
  in searchMove player board

searchMove :: Player -> Board -> [(Int, Move)]
searchMove player board = let
    moves = legalMoves player board
    scoredMoves = map (\m -> (snd $ negascout (BNode (player, 1, move board m)) 2, m)) moves
    cmp (a,_) (b,_) = a `compare` b
    in sortBy cmp scoredMoves
{-
negaMax' :: Int -> Player -> Board -> [(Int, Move)]
negaMax' depth player board = sortBy cmp scoredMoves
    where cmp (a,_) (b,_) = a `compare` b
          scoredMoves =
              map (\m -> (negaMaxVal depth minBound maxBound (player `mod` 2 + 1) (move board m),m)) $ legalMoves player board
          negaMaxVal :: Int -> Int -> Int -> Word8 -> Board -> Int
          negaMaxVal d alpha beta p b = 
              if won scoreOp then (minBound :: Int)
              else if d == 0
                   then scoreOp
                   else let children = map (move b) $ legalMoves p b
                            vals = map (negate . negaMaxVal (d-1) (-beta) (-alpha) op) children
                            trav vs a b | null vs = a
                                        | head vs >= b = head vs
                                        | head vs >= a = trav (tail vs) (head vs) b
                                        | otherwise = trav (tail vs) a b
                        in trav vals alpha beta
              where op = p `mod` 2 + 1
                    scoreOp = totalDistance op b
-}

staticDistance :: Player -> Board -> (Int, Move)
staticDistance player board =
  head . sortBy cmp $ map score (legalMoves player board)
  where cmp (d1, _) (d2, _) = d1 `compare` d2
        score m = (totalDistance player (move board m), m)

move :: Board -> Move -> Board
move (board, parr) ((x,y,_)) =
  let player = board ! x
      ppegs = parr ! (player-1)
      ppegs' = map (\i -> if i == x then y else i) ppegs
  in (board // [(x,0),(y,player)], parr // [(player-1, ppegs')])

totalDistance player (board, parr) = let
  goal = S.toList $ nest (goalNest player)
  stDist = staticDistanceArr player
  pPegs  = parr ! (player-1)
--  pPegs' = pPegs \\ goal
  in sum $ map (stDist !) pPegs

possiblePositions :: Player -> S.Set Int
possiblePositions player =
  S.unions [nest player, nest (goalNest player), middle]

nest :: Player -> S.Set Int
nest player =
  S.fromList $ case player of
    1 -> [4,21,22,38,39,40,55,56,57,58]
    2 -> [230,231,232,233,248,249,250,266,267,284]
    3 -> [68,69,70,71,86,87,88,104,105,122]
    4 -> [166,183,184,200,201,202,217,218,219,220]
    5 -> [77,78,79,80,95,96,97,113,114,131]
    6 -> [157,174,175,191,192,193,208,209,210,211]

goalNest :: Player -> Player
goalNest player | player `elem` [1,3,5] = player+1
                | otherwise  = player-1

middle :: S.Set Int
middle = S.fromList . concat $
         [[72..76], [89..94], [106..112], [123..130], [140..148]
         ,[158..165] ,[176..182], [194..199], [212..216]]

wholeBoard :: S.Set Int
wholeBoard = S.unions [nest i | i <- [1..6]] `S.union` middle

parseBoard :: String -> Board
parseBoard s = (boardArray, playerArray)
    where
      boardArray = listArray (0,288) $ map (fromIntegral . fix) s
      playerArray = listArray (0,5) [ getPlayerPegs p boardArray | p <- [1..6]]
      fix '#' = 255
      fix ' ' = 0
      fix x = ord x - ord '0'

legalMoves :: Player -> Board -> [Move]
legalMoves player (board, parr) = let pPegs = parr ! (player-1)
                                  in concat $ map (legalMovesPeg player board) pPegs

legalMovesPeg :: Player -> Array Int Word8 -> Int -> [Move]
legalMovesPeg player board peg = steps ++ legalJumps [initialJump] []
    where possible = possiblePositions player
          steps = map (\s -> (peg,s,[peg,s])) . filter (\p -> inRange p && board ! p == 0 && p `S.member` possible) $ allowedSteps peg
          isOK (chk, jump) = (board ! chk) /= 0 && (board ! jump) == 0 && jump `S.member` possible
          inRange p = p >= 0 && p <= 288
          initialJump = (peg,[peg])
          legalJumps [] acc = init $ map (\(stop, revpath) -> (peg,stop,reverse revpath)) acc
          legalJumps (j@(stop,path):jumps) acc = legalJumps (jumps ++ newJumps) newAcc
              where
                newAcc = (j:acc)
                newJumps = 
                    foldl (\as a@(_,b) -> if inRange b && isOK a && find (\(x,_) -> x == b) acc == Nothing
                                          then ((b, (b:path)):as)
                                          else as) [] $ allowedJumps stop

getPlayerPegs :: Player -> Array Int Word8 -> [Int]
getPlayerPegs p board = map fst . filter (\(i,e) -> e == p) $ assocs board

allowedSteps pos = [pos-18, pos-17, pos-1, pos+1, pos+17, pos+18]

allowedJumps pos = zip (allowedSteps pos) [pos-36, pos-34, pos-2, pos+2, pos+34, pos+36]

won score = score == -196

staticDistanceArr :: Word8 -> Array Int Int
staticDistanceArr p = distArray ! (p-1)
    where distArray :: Array Word8 (Array Int Int)
          distArray = array (0,5) [(0,array (0,288) [(0,-1),(1,-1),(2,-1),(3,-1),(4,501),(5,-1),(6,-1),(7,-1),(8,-1),(9,-1),(10,-1),(11,-1),(12,-1),(13,-1),(14,-1),(15,-1),(16,-1),(17,-1),(18,-1),(19,-1),(20,-1),(21,518),(22,437),(23,-1),(24,-1),(25,-1),(26,-1),(27,-1),(28,-1),(29,-1),(30,-1),(31,-1),(32,-1),(33,-1),(34,-1),(35,-1),(36,-1),(37,-1),(38,222),(39,203),(40,152),(41,-1),(42,-1),(43,-1),(44,-1),(45,-1),(46,-1),(47,-1),(48,-1),(49,-1),(50,-1),(51,-1),(52,-1),(53,-1),(54,-1),(55,219),(56,185),(57,131),(58,220),(59,-1),(60,-1),(61,-1),(62,-1),(63,-1),(64,-1),(65,-1),(66,-1),(67,-1),(68,195),(69,191),(70,59),(71,139),(72,106),(73,96),(74,141),(75,112),(76,146),(77,5),(78,53),(79,49),(80,6),(81,-1),(82,-1),(83,-1),(84,-1),(85,-1),(86,137),(87,73),(88,131),(89,154),(90,54),(91,90),(92,128),(93,81),(94,193),(95,55),(96,154),(97,45),(98,-1),(99,-1),(100,-1),(101,-1),(102,-1),(103,-1),(104,204),(105,165),(106,83),(107,98),(108,46),(109,52),(110,62),(111,142),(112,69),(113,83),(114,145),(115,-1),(116,-1),(117,-1),(118,-1),(119,-1),(120,-1),(121,-1),(122,201),(123,69),(124,82),(125,47),(126,33),(127,108),(128,89),(129,188),(130,40),(131,69),(132,-1),(133,-1),(134,-1),(135,-1),(136,-1),(137,-1),(138,-1),(139,-1),(140,177),(141,56),(142,247),(143,27),(144,31),(145,77),(146,102),(147,130),(148,94),(149,-1),(150,-1),(151,-1),(152,-1),(153,-1),(154,-1),(155,-1),(156,-1),(157,97),(158,123),(159,150),(160,135),(161,23),(162,199),(163,105),(164,139),(165,204),(166,222),(167,-1),(168,-1),(169,-1),(170,-1),(171,-1),(172,-1),(173,-1),(174,218),(175,17),(176,203),(177,56),(178,41),(179,22),(180,117),(181,90),(182,15),(183,45),(184,78),(185,-1),(186,-1),(187,-1),(188,-1),(189,-1),(190,-1),(191,135),(192,172),(193,109),(194,73),(195,227),(196,21),(197,196),(198,181),(199,183),(200,165),(201,156),(202,61),(203,-1),(204,-1),(205,-1),(206,-1),(207,-1),(208,171),(209,61),(210,155),(211,162),(212,72),(213,153),(214,5),(215,124),(216,72),(217,184),(218,10),(219,52),(220,162),(221,-1),(222,-1),(223,-1),(224,-1),(225,-1),(226,-1),(227,-1),(228,-1),(229,-1),(230,-32),(231,3),(232,5),(233,-3),(234,-1),(235,-1),(236,-1),(237,-1),(238,-1),(239,-1),(240,-1),(241,-1),(242,-1),(243,-1),(244,-1),(245,-1),(246,-1),(247,-1),(248,5),(249,-61),(250,-62),(251,-1),(252,-1),(253,-1),(254,-1),(255,-1),(256,-1),(257,-1),(258,-1),(259,-1),(260,-1),(261,-1),(262,-1),(263,-1),(264,-1),(265,-1),(266,2),(267,0),(268,-1),(269,-1),(270,-1),(271,-1),(272,-1),(273,-1),(274,-1),(275,-1),(276,-1),(277,-1),(278,-1),(279,-1),(280,-1),(281,-1),(282,-1),(283,-1),(284,-53),(285,-1),(286,-1),(287,-1),(288,-1)]),(1,array (0,288) [(0,-1),(1,-1),(2,-1),(3,-1),(4,-53),(5,-1),(6,-1),(7,-1),(8,-1),(9,-1),(10,-1),(11,-1),(12,-1),(13,-1),(14,-1),(15,-1),(16,-1),(17,-1),(18,-1),(19,-1),(20,-1),(21,0),(22,2),(23,-1),(24,-1),(25,-1),(26,-1),(27,-1),(28,-1),(29,-1),(30,-1),(31,-1),(32,-1),(33,-1),(34,-1),(35,-1),(36,-1),(37,-1),(38,-62),(39,-61),(40,5),(41,-1),(42,-1),(43,-1),(44,-1),(45,-1),(46,-1),(47,-1),(48,-1),(49,-1),(50,-1),(51,-1),(52,-1),(53,-1),(54,-1),(55,-3),(56,5),(57,3),(58,-32),(59,-1),(60,-1),(61,-1),(62,-1),(63,-1),(64,-1),(65,-1),(66,-1),(67,-1),(68,162),(69,52),(70,10),(71,184),(72,72),(73,124),(74,5),(75,153),(76,72),(77,162),(78,155),(79,61),(80,171),(81,-1),(82,-1),(83,-1),(84,-1),(85,-1),(86,61),(87,156),(88,165),(89,183),(90,181),(91,196),(92,21),(93,227),(94,73),(95,109),(96,172),(97,135),(98,-1),(99,-1),(100,-1),(101,-1),(102,-1),(103,-1),(104,78),(105,45),(106,15),(107,90),(108,117),(109,22),(110,41),(111,56),(112,203),(113,17),(114,218),(115,-1),(116,-1),(117,-1),(118,-1),(119,-1),(120,-1),(121,-1),(122,222),(123,204),(124,139),(125,105),(126,199),(127,23),(128,135),(129,150),(130,123),(131,97),(132,-1),(133,-1),(134,-1),(135,-1),(136,-1),(137,-1),(138,-1),(139,-1),(140,94),(141,130),(142,102),(143,77),(144,31),(145,27),(146,247),(147,56),(148,177),(149,-1),(150,-1),(151,-1),(152,-1),(153,-1),(154,-1),(155,-1),(156,-1),(157,69),(158,40),(159,188),(160,89),(161,108),(162,33),(163,47),(164,82),(165,69),(166,201),(167,-1),(168,-1),(169,-1),(170,-1),(171,-1),(172,-1),(173,-1),(174,145),(175,83),(176,69),(177,142),(178,62),(179,52),(180,46),(181,98),(182,83),(183,165),(184,204),(185,-1),(186,-1),(187,-1),(188,-1),(189,-1),(190,-1),(191,45),(192,154),(193,55),(194,193),(195,81),(196,128),(197,90),(198,54),(199,154),(200,131),(201,73),(202,137),(203,-1),(204,-1),(205,-1),(206,-1),(207,-1),(208,6),(209,49),(210,53),(211,5),(212,146),(213,112),(214,141),(215,96),(216,106),(217,139),(218,59),(219,191),(220,195),(221,-1),(222,-1),(223,-1),(224,-1),(225,-1),(226,-1),(227,-1),(228,-1),(229,-1),(230,220),(231,131),(232,185),(233,219),(234,-1),(235,-1),(236,-1),(237,-1),(238,-1),(239,-1),(240,-1),(241,-1),(242,-1),(243,-1),(244,-1),(245,-1),(246,-1),(247,-1),(248,152),(249,203),(250,222),(251,-1),(252,-1),(253,-1),(254,-1),(255,-1),(256,-1),(257,-1),(258,-1),(259,-1),(260,-1),(261,-1),(262,-1),(263,-1),(264,-1),(265,-1),(266,437),(267,518),(268,-1),(269,-1),(270,-1),(271,-1),(272,-1),(273,-1),(274,-1),(275,-1),(276,-1),(277,-1),(278,-1),(279,-1),(280,-1),(281,-1),(282,-1),(283,-1),(284,501),(285,-1),(286,-1),(287,-1),(288,-1)]),(2,array (0,288) [(0,-1),(1,-1),(2,-1),(3,-1),(4,6),(5,-1),(6,-1),(7,-1),(8,-1),(9,-1),(10,-1),(11,-1),(12,-1),(13,-1),(14,-1),(15,-1),(16,-1),(17,-1),(18,-1),(19,-1),(20,-1),(21,49),(22,45),(23,-1),(24,-1),(25,-1),(26,-1),(27,-1),(28,-1),(29,-1),(30,-1),(31,-1),(32,-1),(33,-1),(34,-1),(35,-1),(36,-1),(37,-1),(38,53),(39,154),(40,145),(41,-1),(42,-1),(43,-1),(44,-1),(45,-1),(46,-1),(47,-1),(48,-1),(49,-1),(50,-1),(51,-1),(52,-1),(53,-1),(54,-1),(55,5),(56,55),(57,83),(58,69),(59,-1),(60,-1),(61,-1),(62,-1),(63,-1),(64,-1),(65,-1),(66,-1),(67,-1),(68,501),(69,437),(70,152),(71,220),(72,146),(73,193),(74,69),(75,40),(76,94),(77,222),(78,78),(79,61),(80,162),(81,-1),(82,-1),(83,-1),(84,-1),(85,-1),(86,518),(87,203),(88,131),(89,112),(90,81),(91,142),(92,188),(93,130),(94,204),(95,45),(96,156),(97,52),(98,-1),(99,-1),(100,-1),(101,-1),(102,-1),(103,-1),(104,222),(105,185),(106,141),(107,128),(108,62),(109,89),(110,102),(111,139),(112,15),(113,165),(114,10),(115,-1),(116,-1),(117,-1),(118,-1),(119,-1),(120,-1),(121,-1),(122,219),(123,96),(124,90),(125,52),(126,108),(127,77),(128,105),(129,90),(130,183),(131,184),(132,-1),(133,-1),(134,-1),(135,-1),(136,-1),(137,-1),(138,-1),(139,-1),(140,106),(141,54),(142,46),(143,33),(144,31),(145,199),(146,117),(147,181),(148,72),(149,-1),(150,-1),(151,-1),(152,-1),(153,-1),(154,-1),(155,-1),(156,-1),(157,139),(158,154),(159,98),(160,47),(161,27),(162,23),(163,22),(164,196),(165,124),(166,-3),(167,-1),(168,-1),(169,-1),(170,-1),(171,-1),(172,-1),(173,-1),(174,59),(175,131),(176,83),(177,82),(178,247),(179,135),(180,41),(181,21),(182,5),(183,5),(184,-62),(185,-1),(186,-1),(187,-1),(188,-1),(189,-1),(190,-1),(191,191),(192,73),(193,165),(194,69),(195,56),(196,150),(197,56),(198,227),(199,153),(200,3),(201,-61),(202,0),(203,-1),(204,-1),(205,-1),(206,-1),(207,-1),(208,195),(209,137),(210,204),(211,201),(212,177),(213,123),(214,203),(215,73),(216,72),(217,-32),(218,5),(219,2),(220,-53),(221,-1),(222,-1),(223,-1),(224,-1),(225,-1),(226,-1),(227,-1),(228,-1),(229,-1),(230,97),(231,17),(232,109),(233,162),(234,-1),(235,-1),(236,-1),(237,-1),(238,-1),(239,-1),(240,-1),(241,-1),(242,-1),(243,-1),(244,-1),(245,-1),(246,-1),(247,-1),(248,218),(249,172),(250,155),(251,-1),(252,-1),(253,-1),(254,-1),(255,-1),(256,-1),(257,-1),(258,-1),(259,-1),(260,-1),(261,-1),(262,-1),(263,-1),(264,-1),(265,-1),(266,135),(267,61),(268,-1),(269,-1),(270,-1),(271,-1),(272,-1),(273,-1),(274,-1),(275,-1),(276,-1),(277,-1),(278,-1),(279,-1),(280,-1),(281,-1),(282,-1),(283,-1),(284,171),(285,-1),(286,-1),(287,-1),(288,-1)]),(3,array (0,288) [(0,-1),(1,-1),(2,-1),(3,-1),(4,171),(5,-1),(6,-1),(7,-1),(8,-1),(9,-1),(10,-1),(11,-1),(12,-1),(13,-1),(14,-1),(15,-1),(16,-1),(17,-1),(18,-1),(19,-1),(20,-1),(21,61),(22,135),(23,-1),(24,-1),(25,-1),(26,-1),(27,-1),(28,-1),(29,-1),(30,-1),(31,-1),(32,-1),(33,-1),(34,-1),(35,-1),(36,-1),(37,-1),(38,155),(39,172),(40,218),(41,-1),(42,-1),(43,-1),(44,-1),(45,-1),(46,-1),(47,-1),(48,-1),(49,-1),(50,-1),(51,-1),(52,-1),(53,-1),(54,-1),(55,162),(56,109),(57,17),(58,97),(59,-1),(60,-1),(61,-1),(62,-1),(63,-1),(64,-1),(65,-1),(66,-1),(67,-1),(68,-53),(69,2),(70,5),(71,-32),(72,72),(73,73),(74,203),(75,123),(76,177),(77,201),(78,204),(79,137),(80,195),(81,-1),(82,-1),(83,-1),(84,-1),(85,-1),(86,0),(87,-61),(88,3),(89,153),(90,227),(91,56),(92,150),(93,56),(94,69),(95,165),(96,73),(97,191),(98,-1),(99,-1),(100,-1),(101,-1),(102,-1),(103,-1),(104,-62),(105,5),(106,5),(107,21),(108,41),(109,135),(110,247),(111,82),(112,83),(113,131),(114,59),(115,-1),(116,-1),(117,-1),(118,-1),(119,-1),(120,-1),(121,-1),(122,-3),(123,124),(124,196),(125,22),(126,23),(127,27),(128,47),(129,98),(130,154),(131,139),(132,-1),(133,-1),(134,-1),(135,-1),(136,-1),(137,-1),(138,-1),(139,-1),(140,72),(141,181),(142,117),(143,199),(144,31),(145,33),(146,46),(147,54),(148,106),(149,-1),(150,-1),(151,-1),(152,-1),(153,-1),(154,-1),(155,-1),(156,-1),(157,184),(158,183),(159,90),(160,105),(161,77),(162,108),(163,52),(164,90),(165,96),(166,219),(167,-1),(168,-1),(169,-1),(170,-1),(171,-1),(172,-1),(173,-1),(174,10),(175,165),(176,15),(177,139),(178,102),(179,89),(180,62),(181,128),(182,141),(183,185),(184,222),(185,-1),(186,-1),(187,-1),(188,-1),(189,-1),(190,-1),(191,52),(192,156),(193,45),(194,204),(195,130),(196,188),(197,142),(198,81),(199,112),(200,131),(201,203),(202,518),(203,-1),(204,-1),(205,-1),(206,-1),(207,-1),(208,162),(209,61),(210,78),(211,222),(212,94),(213,40),(214,69),(215,193),(216,146),(217,220),(218,152),(219,437),(220,501),(221,-1),(222,-1),(223,-1),(224,-1),(225,-1),(226,-1),(227,-1),(228,-1),(229,-1),(230,69),(231,83),(232,55),(233,5),(234,-1),(235,-1),(236,-1),(237,-1),(238,-1),(239,-1),(240,-1),(241,-1),(242,-1),(243,-1),(244,-1),(245,-1),(246,-1),(247,-1),(248,145),(249,154),(250,53),(251,-1),(252,-1),(253,-1),(254,-1),(255,-1),(256,-1),(257,-1),(258,-1),(259,-1),(260,-1),(261,-1),(262,-1),(263,-1),(264,-1),(265,-1),(266,45),(267,49),(268,-1),(269,-1),(270,-1),(271,-1),(272,-1),(273,-1),(274,-1),(275,-1),(276,-1),(277,-1),(278,-1),(279,-1),(280,-1),(281,-1),(282,-1),(283,-1),(284,6),(285,-1),(286,-1),(287,-1),(288,-1)]),(4,array (0,288) [(0,-1),(1,-1),(2,-1),(3,-1),(4,195),(5,-1),(6,-1),(7,-1),(8,-1),(9,-1),(10,-1),(11,-1),(12,-1),(13,-1),(14,-1),(15,-1),(16,-1),(17,-1),(18,-1),(19,-1),(20,-1),(21,137),(22,191),(23,-1),(24,-1),(25,-1),(26,-1),(27,-1),(28,-1),(29,-1),(30,-1),(31,-1),(32,-1),(33,-1),(34,-1),(35,-1),(36,-1),(37,-1),(38,204),(39,73),(40,59),(41,-1),(42,-1),(43,-1),(44,-1),(45,-1),(46,-1),(47,-1),(48,-1),(49,-1),(50,-1),(51,-1),(52,-1),(53,-1),(54,-1),(55,201),(56,165),(57,131),(58,139),(59,-1),(60,-1),(61,-1),(62,-1),(63,-1),(64,-1),(65,-1),(66,-1),(67,-1),(68,171),(69,135),(70,218),(71,97),(72,177),(73,69),(74,83),(75,154),(76,106),(77,219),(78,222),(79,518),(80,501),(81,-1),(82,-1),(83,-1),(84,-1),(85,-1),(86,61),(87,172),(88,17),(89,123),(90,56),(91,82),(92,98),(93,54),(94,96),(95,185),(96,203),(97,437),(98,-1),(99,-1),(100,-1),(101,-1),(102,-1),(103,-1),(104,155),(105,109),(106,203),(107,150),(108,247),(109,47),(110,46),(111,90),(112,141),(113,131),(114,152),(115,-1),(116,-1),(117,-1),(118,-1),(119,-1),(120,-1),(121,-1),(122,162),(123,73),(124,56),(125,135),(126,27),(127,33),(128,52),(129,128),(130,112),(131,220),(132,-1),(133,-1),(134,-1),(135,-1),(136,-1),(137,-1),(138,-1),(139,-1),(140,72),(141,227),(142,41),(143,23),(144,31),(145,108),(146,62),(147,81),(148,146),(149,-1),(150,-1),(151,-1),(152,-1),(153,-1),(154,-1),(155,-1),(156,-1),(157,-32),(158,153),(159,21),(160,22),(161,199),(162,77),(163,89),(164,142),(165,193),(166,5),(167,-1),(168,-1),(169,-1),(170,-1),(171,-1),(172,-1),(173,-1),(174,5),(175,3),(176,5),(177,196),(178,117),(179,105),(180,102),(181,188),(182,69),(183,55),(184,53),(185,-1),(186,-1),(187,-1),(188,-1),(189,-1),(190,-1),(191,2),(192,-61),(193,5),(194,124),(195,181),(196,90),(197,139),(198,130),(199,40),(200,83),(201,154),(202,49),(203,-1),(204,-1),(205,-1),(206,-1),(207,-1),(208,-53),(209,0),(210,-62),(211,-3),(212,72),(213,183),(214,15),(215,204),(216,94),(217,69),(218,145),(219,45),(220,6),(221,-1),(222,-1),(223,-1),(224,-1),(225,-1),(226,-1),(227,-1),(228,-1),(229,-1),(230,184),(231,165),(232,45),(233,222),(234,-1),(235,-1),(236,-1),(237,-1),(238,-1),(239,-1),(240,-1),(241,-1),(242,-1),(243,-1),(244,-1),(245,-1),(246,-1),(247,-1),(248,10),(249,156),(250,78),(251,-1),(252,-1),(253,-1),(254,-1),(255,-1),(256,-1),(257,-1),(258,-1),(259,-1),(260,-1),(261,-1),(262,-1),(263,-1),(264,-1),(265,-1),(266,52),(267,61),(268,-1),(269,-1),(270,-1),(271,-1),(272,-1),(273,-1),(274,-1),(275,-1),(276,-1),(277,-1),(278,-1),(279,-1),(280,-1),(281,-1),(282,-1),(283,-1),(284,162),(285,-1),(286,-1),(287,-1),(288,-1)]),(5,array (0,288) [(0,-1),(1,-1),(2,-1),(3,-1),(4,162),(5,-1),(6,-1),(7,-1),(8,-1),(9,-1),(10,-1),(11,-1),(12,-1),(13,-1),(14,-1),(15,-1),(16,-1),(17,-1),(18,-1),(19,-1),(20,-1),(21,61),(22,52),(23,-1),(24,-1),(25,-1),(26,-1),(27,-1),(28,-1),(29,-1),(30,-1),(31,-1),(32,-1),(33,-1),(34,-1),(35,-1),(36,-1),(37,-1),(38,78),(39,156),(40,10),(41,-1),(42,-1),(43,-1),(44,-1),(45,-1),(46,-1),(47,-1),(48,-1),(49,-1),(50,-1),(51,-1),(52,-1),(53,-1),(54,-1),(55,222),(56,45),(57,165),(58,184),(59,-1),(60,-1),(61,-1),(62,-1),(63,-1),(64,-1),(65,-1),(66,-1),(67,-1),(68,6),(69,45),(70,145),(71,69),(72,94),(73,204),(74,15),(75,183),(76,72),(77,-3),(78,-62),(79,0),(80,-53),(81,-1),(82,-1),(83,-1),(84,-1),(85,-1),(86,49),(87,154),(88,83),(89,40),(90,130),(91,139),(92,90),(93,181),(94,124),(95,5),(96,-61),(97,2),(98,-1),(99,-1),(100,-1),(101,-1),(102,-1),(103,-1),(104,53),(105,55),(106,69),(107,188),(108,102),(109,105),(110,117),(111,196),(112,5),(113,3),(114,5),(115,-1),(116,-1),(117,-1),(118,-1),(119,-1),(120,-1),(121,-1),(122,5),(123,193),(124,142),(125,89),(126,77),(127,199),(128,22),(129,21),(130,153),(131,-32),(132,-1),(133,-1),(134,-1),(135,-1),(136,-1),(137,-1),(138,-1),(139,-1),(140,146),(141,81),(142,62),(143,108),(144,31),(145,23),(146,41),(147,227),(148,72),(149,-1),(150,-1),(151,-1),(152,-1),(153,-1),(154,-1),(155,-1),(156,-1),(157,220),(158,112),(159,128),(160,52),(161,33),(162,27),(163,135),(164,56),(165,73),(166,162),(167,-1),(168,-1),(169,-1),(170,-1),(171,-1),(172,-1),(173,-1),(174,152),(175,131),(176,141),(177,90),(178,46),(179,47),(180,247),(181,150),(182,203),(183,109),(184,155),(185,-1),(186,-1),(187,-1),(188,-1),(189,-1),(190,-1),(191,437),(192,203),(193,185),(194,96),(195,54),(196,98),(197,82),(198,56),(199,123),(200,17),(201,172),(202,61),(203,-1),(204,-1),(205,-1),(206,-1),(207,-1),(208,501),(209,518),(210,222),(211,219),(212,106),(213,154),(214,83),(215,69),(216,177),(217,97),(218,218),(219,135),(220,171),(221,-1),(222,-1),(223,-1),(224,-1),(225,-1),(226,-1),(227,-1),(228,-1),(229,-1),(230,139),(231,131),(232,165),(233,201),(234,-1),(235,-1),(236,-1),(237,-1),(238,-1),(239,-1),(240,-1),(241,-1),(242,-1),(243,-1),(244,-1),(245,-1),(246,-1),(247,-1),(248,59),(249,73),(250,204),(251,-1),(252,-1),(253,-1),(254,-1),(255,-1),(256,-1),(257,-1),(258,-1),(259,-1),(260,-1),(261,-1),(262,-1),(263,-1),(264,-1),(265,-1),(266,191),(267,137),(268,-1),(269,-1),(270,-1),(271,-1),(272,-1),(273,-1),(274,-1),(275,-1),(276,-1),(277,-1),(278,-1),(279,-1),(280,-1),(281,-1),(282,-1),(283,-1),(284,195),(285,-1),(286,-1),(287,-1),(288,-1)])]
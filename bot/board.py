# -*- coding: utf-8 -*-

# Copyright (C) 2012  Salvo "LtWorf" Tomaselli
# Copyright (C) 2012 Göran Weinholt
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# author Salvo "LtWorf" Tomaselli <tiposchi@tiscali.it>
# author Göran Weinholt

from math import sqrt

BOARD_LENGTH = 17*17
PEG_IDS = "x123456"
INVALID = '#'
EMPTY = ' '
NEIGHBORS = [ +1, -1, -18, -17, +18, +17 ]
FULL_BOARD = '####1################11###############111##############1111#########3333     5555#####333      555######33       55#######3        5########         ########6        4#######66       44######666      444#####6666     4444#########2222##############222###############22################2###'
REVERSED_FULL_BOARD = {' ': [72, 73, 74, 75, 76, 89, 90, 91, 92, 93, 94, 106, 107, 108, 109, 110, 111, 112, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 142, 143, 144, 145, 146, 147, 148, 158, 159, 160, 161, 162, 163, 164, 165, 176, 177, 178, 179, 180, 181, 182, 194, 195, 196, 197, 198, 199, 212, 213, 214, 215, 216], '#': [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 81, 82, 83, 84, 85, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 121, 132, 133, 134, 135, 136, 137, 138, 139, 149, 150, 151, 152, 153, 154, 155, 156, 167, 168, 169, 170, 171, 172, 173, 185, 186, 187, 188, 189, 190, 203, 204, 205, 206, 207, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287], '1': [4, 21, 22, 38, 39, 40, 55, 56, 57, 58], '3': [68, 69, 70, 71, 86, 87, 88, 104, 105, 122], '2': [230, 231, 232, 233, 248, 249, 250, 266, 267, 284], '5': [77, 78, 79, 80, 95, 96, 97, 113, 114, 131], '4': [166, 183, 184, 200, 201, 202, 217, 218, 219, 220], '6': [157, 174, 175, 191, 192, 193, 208, 209, 210, 211]}
OPPOSITES=[None,2,1,4,3,6,5]

def pretty_print(board):
    for i in range(len(board)):
        if i %17==0: print
        print board[i],
        

def static_distance_from_target(board,player):
    data=(None, # V4
          (-1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 24, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, 21, 22, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 20, 20, 20, 20, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 18, 17, 17, 17, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 15, 15, 15, 15, 16, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 13, 13, 12, 12, 12, 13, 13, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 10, 10, 10, 10, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, 8, 8, 8, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 6, 6, 7, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 4, 4, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1),
          (-1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 4, 4, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 6, 6, 7, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, 8, 8, 8, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 10, 10, 10, 10, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 13, 13, 12, 12, 12, 13, 13, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 15, 15, 15, 15, 16, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 18, 17, 17, 17, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 20, 20, 20, 20, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, 21, 22, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 24, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1),
          (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 46, 24, 23, 22, 19, 19, 16, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 24, 23, 22, 20, 18, 16, 13, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 23, 21, 20, 17, 15, 13, 11, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 20, 17, 15, 12, 10, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 20, 17, 15, 12, 10, 8, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 18, 15, 12, 10, 8, 6, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 16, 13, 10, 8, 6, 4, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 13, 11, 8, 7, 4, 3, 2, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 11, 9, 7, 5, 3, 2, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
          (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 5, 7, 9, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 7, 8, 11, 13, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 6, 8, 10, 13, 16, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 6, 8, 10, 12, 15, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 7, 8, 10, 12, 15, 17, 20, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 10, 12, 15, 17, 20, 22, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 11, 13, 15, 17, 20, 21, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 13, 16, 18, 20, 22, 23, 24, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 16, 19, 19, 22, 23, 24, 46, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
          (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 16, 19, 19, 22, 23, 24, 46, 57, -1, -1, -1, -1, -1, -1, -1, -1, 11, 13, 16, 18, 20, 22, 23, 24, 46, -1, -1, -1, -1, -1, -1, -1, -1, 9, 11, 13, 15, 17, 20, 21, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 10, 12, 15, 17, 20, 22, 23, -1, -1, -1, -1, -1, -1, -1, -1, 5, 7, 8, 10, 12, 15, 17, 20, 22, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 6, 8, 10, 12, 15, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 6, 8, 10, 13, 16, 19, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 7, 8, 11, 13, 16, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 5, 7, 9, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
          (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 11, 9, 7, 5, 3, 2, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 16, 13, 11, 8, 7, 4, 3, 2, 1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 16, 13, 10, 8, 6, 4, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, 19, 18, 15, 12, 10, 8, 6, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, 22, 20, 17, 15, 12, 10, 8, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 20, 17, 15, 12, 10, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, 24, 23, 21, 20, 17, 15, 13, 11, 9, -1, -1, -1, -1, -1, -1, -1, -1, 46, 24, 23, 22, 20, 18, 16, 13, 11, -1, -1, -1, -1, -1, -1, -1, -1, 57, 46, 24, 23, 22, 19, 19, 16, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1))

    pos = [i for i in xrange(288) if board[i]==str(player)]
    distances = [data[player][i] for i in pos]
    return reduce ((lambda a,b:a+b),distances,0)

def evolved_distance(board, player):
    """A board evaluation function based on a genetic algorithm's idea
    of what a good function might be."""
    data=(None,
          (-1, -1, -1, -1, 500, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 503, 456, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 217, 200, 185, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 214, 198, 174, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, 164, 79, 125, 110, 97, 172, 107, 142, 20, 55, 16, 9, -1, -1, -1, -1, -1, 140, 40, 159, 140, 60, 114, 141, 63, 192, 110, 124, 32, -1, -1, -1, -1, -1, -1, 165, 153, 99, 108, 53, 52, 58, 152, 79, 85, 170, -1, -1, -1, -1, -1, -1, -1, 206, 110, 73, 45, 33, 119, 120, 194, 24, 98, -1, -1, -1, -1, -1, -1, -1, -1, 160, 37, 219, 24, 76, 176, 73, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, 129, 166, 162, 106, 23, 170, 79, 111, 194, 179, -1, -1, -1, -1, -1, -1, -1, 151, 13, 202, 72, 24, 22, 155, 112, 49, 96, 16, -1, -1, -1, -1, -1, -1, 139, 174, 131, 65, 197, 12, 193, 214, 104, 134, 107, 23, -1, -1, -1, -1, -1, 162, 90, 189, 160, 111, 171, 5, 178, 98, 150, 7, 100, 182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, 5, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -10, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -12, -1, -1, -1, -1),
          (-1, -1, -1, -1, -12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -10, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 5, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, 100, 7, 150, 98, 178, 5, 171, 111, 160, 189, 90, 162, -1, -1, -1, -1, -1, 23, 107, 134, 104, 214, 193, 12, 197, 65, 131, 174, 139, -1, -1, -1, -1, -1, -1, 16, 96, 49, 112, 155, 22, 24, 72, 202, 13, 151, -1, -1, -1, -1, -1, -1, -1, 179, 194, 111, 79, 170, 23, 106, 162, 166, 129, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, 73, 176, 76, 24, 219, 37, 160, -1, -1, -1, -1, -1, -1, -1, -1, 98, 24, 194, 120, 119, 33, 45, 73, 110, 206, -1, -1, -1, -1, -1, -1, -1, 170, 85, 79, 152, 58, 52, 53, 108, 99, 153, 165, -1, -1, -1, -1, -1, -1, 32, 124, 110, 192, 63, 141, 114, 60, 140, 159, 40, 140, -1, -1, -1, -1, -1, 9, 16, 55, 20, 142, 107, 172, 97, 110, 125, 79, 164, 216, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, 174, 198, 214, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 185, 200, 217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 456, 503, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 500, -1, -1, -1, -1),
          (-1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 124, 170, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 110, 85, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, 500, 456, 185, 208, 142, 192, 79, 24, 84, 179, 16, 23, 182, -1, -1, -1, -1, -1, 503, 200, 174, 107, 63, 152, 194, 84, 194, 96, 107, 100, -1, -1, -1, -1, -1, -1, 217, 198, 172, 141, 58, 120, 73, 111, 49, 134, 7, -1, -1, -1, -1, -1, -1, -1, 214, 97, 114, 52, 119, 176, 79, 112, 104, 150, -1, -1, -1, -1, -1, -1, -1, -1, 110, 60, 53, 33, 76, 170, 155, 214, 98, -1, -1, -1, -1, -1, -1, -1, -1, 125, 140, 108, 45, 24, 23, 22, 193, 178, 0, -1, -1, -1, -1, -1, -1, -1, 79, 159, 99, 73, 219, 106, 24, 12, 5, 5, -3, -1, -1, -1, -1, -1, -1, 164, 40, 153, 110, 37, 162, 72, 197, 171, 5, -10, 0, -1, -1, -1, -1, -1, 216, 140, 165, 206, 160, 166, 202, 65, 111, -17, 5, 0, -12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 13, 131, 160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 151, 174, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, -1, -1, -1, -1),
          (-1, -1, -1, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 189, 174, 151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160, 131, 13, 129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -12, 0, 5, -17, 111, 65, 202, 166, 160, 206, 165, 140, 216, -1, -1, -1, -1, -1, 0, -10, 5, 171, 197, 72, 162, 37, 110, 153, 40, 164, -1, -1, -1, -1, -1, -1, -3, 5, 5, 12, 24, 106, 219, 73, 99, 159, 79, -1, -1, -1, -1, -1, -1, -1, 0, 178, 193, 22, 23, 24, 45, 108, 140, 125, -1, -1, -1, -1, -1, -1, -1, -1, 98, 214, 155, 170, 76, 33, 53, 60, 110, -1, -1, -1, -1, -1, -1, -1, -1, 150, 104, 112, 79, 176, 119, 52, 114, 97, 214, -1, -1, -1, -1, -1, -1, -1, 7, 134, 49, 111, 73, 120, 58, 141, 172, 198, 217, -1, -1, -1, -1, -1, -1, 100, 107, 96, 194, 84, 194, 152, 63, 107, 174, 200, 503, -1, -1, -1, -1, -1, 182, 23, 16, 179, 84, 24, 79, 192, 142, 208, 185, 456, 500, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, 85, 110, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 170, 124, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1),
          (-1, -1, -1, -1, 216, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 165, 40, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 206, 153, 159, 125, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 139, 151, 129, 160, 110, 99, 140, 110, 214, 217, 503, 500, -1, -1, -1, -1, -1, 90, 174, 13, 166, 37, 73, 108, 60, 97, 198, 200, 456, -1, -1, -1, -1, -1, -1, 189, 131, 202, 162, 219, 45, 53, 114, 172, 174, 185, -1, -1, -1, -1, -1, -1, -1, 160, 65, 72, 106, 24, 33, 52, 141, 107, 208, -1, -1, -1, -1, -1, -1, -1, -1, 111, 197, 24, 23, 76, 119, 58, 63, 142, -1, -1, -1, -1, -1, -1, -1, -1, -17, 171, 12, 22, 170, 176, 120, 152, 192, 20, -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 193, 155, 79, 73, 194, 79, 110, 55, -1, -1, -1, -1, -1, -1, 0, -10, 5, 178, 214, 112, 111, 84, 24, 85, 124, 16, -1, -1, -1, -1, -1, -12, 0, -3, 0, 98, 104, 49, 194, 84, 98, 170, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 150, 134, 96, 179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 107, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1, -1, -1, -1),
          (-1, -1, -1, -1, 182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 107, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 179, 96, 134, 150, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 32, 170, 98, 84, 194, 49, 104, 98, 0, -3, 0, -12, -1, -1, -1, -1, -1, 16, 124, 85, 24, 84, 111, 112, 214, 178, 5, -10, 0, -1, -1, -1, -1, -1, -1, 55, 110, 79, 194, 73, 79, 155, 193, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 20, 192, 152, 120, 176, 170, 22, 12, 171, -17, -1, -1, -1, -1, -1, -1, -1, -1, 142, 63, 58, 119, 76, 23, 24, 197, 111, -1, -1, -1, -1, -1, -1, -1, -1, 208, 107, 141, 52, 33, 24, 106, 72, 65, 160, -1, -1, -1, -1, -1, -1, -1, 185, 174, 172, 114, 53, 45, 219, 162, 202, 131, 189, -1, -1, -1, -1, -1, -1, 456, 200, 198, 97, 60, 108, 73, 37, 166, 13, 174, 90, -1, -1, -1, -1, -1, 500, 503, 217, 214, 110, 140, 99, 110, 160, 129, 151, 139, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, 125, 159, 153, 206, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, 40, 165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 164, 140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, -1))
    return sum([ data[player][i] for i in peg_positions(board, player) ])


def euclidean_distance(a,b):
    '''Distance between two points on the board, not sure if this is the most
    effective distance function possible, but it should work.
    
    It respects the 3 properties of a distance function
    '''
    coord = lambda p : ((p-p%17)/17, p%17)
    dist= lambda c1,c2: sqrt(((c1[0]-c2[0])**2) + ((c1[1]-c2[1])**2))
    
    a=coord(a)
    b=coord(b)
    
    return dist (a,b)

def euclidean_distance_from_target(board,player,target=None):
    '''Returns the total distance of all the marbles to the target.
    Marbles on the target return 0
    
    Board is a linear array representing the board
    Player is an int indicating the id of the player, it can be an int or a
    string of 1 byte
    
    Target is the id of the target positions (refer to REVERSED_FULL_BOARD
    to better understand that).
    It can be an int or a string of 1 byte
    '''
    if target==None:
        target=OPPOSITES[int(player)]
    
    target = list(REVERSED_FULL_BOARD[str(target)])
    marbles=[]
    
    for i in xrange(len(board)):
        if board[i] == str(player):
            if i not in target:
                marbles.append(i)
            else: 
                target.remove(i)
    dist=lambda a,b: euclidean_distance(a,b)#**2
    return reduce ((lambda a,b:a+b),map(dist,marbles,target),0.0)
    
    pass

def update_board(board, move):
    l = list(board)
    tmp = l[move[0]]
    l[move[0]] = EMPTY
    l[move[-1]] = tmp
    return ''.join(l)

def is_on_board(n):
    """True if position n is inside the board."""
    return n >= 0 and n < BOARD_LENGTH

def is_occupied(board, n):
    """True if position n a valid but occupied position."""
    return board[n] not in (INVALID, EMPTY)

def is_empty(board, n):
    """True if position n is a valid empty position."""
    return board[n] == EMPTY

def is_valid_stop(n, peg_id):
    """True if peg_id is allowed to stop at position n."""
    ## TODO: should this use the initial board that the server created?
    return FULL_BOARD[n] in (PEG_IDS[peg_id], EMPTY,
                             PEG_IDS[OPPOSITES[peg_id]])

def peg_positions(board, peg_id):
    """The positions of all pegs with the given id."""
    return [ x for x in range(len(board))
             if board[x] == PEG_IDS[peg_id] ]

def won(board, player_id):
    """ Return true if player with id player_id has won, else false. """
    goal_nest = OPPOSITES[player_id]
    nest = REVERSED_FULL_BOARD[str(goal_nest)]
    for target_peg in nest:
        if board[target_peg] !=  str(player_id):
            return False
    return True

def adjacent(n):
    """The board positions that are adjacent to n. It is legal to move
    from n to one of these positions if that positions is
    unoccupied."""
    return [ (n-x) for x in NEIGHBORS if is_on_board(n-x) ]

def jumps(n):
    """The board positions that can be jumped to from n. Returns
    tuples of (dest,chk). It is legal to move to a dest position if
    the chk position is occupied by another peg."""
    return [ ((n-x*2), n-x) for x in NEIGHBORS
             if is_on_board(n-x) and is_on_board(n-x*2) ]

def available_moves(board, initial, first=True, jumped=[]):
    """Generates all moves for a given peg that starts at position
    'initial'."""
    # First try to move without jumping (unless already jumping)
    if first:
        for i in adjacent(initial):
            if is_empty(board, i) and not i in jumped:
                yield jumped + [initial, i]
    # Now try jumping.
    path = jumped + [initial]
    for dest, chk in jumps(initial):
        if is_empty(board, dest) and is_occupied(board, chk) and \
                not dest in jumped:
            yield path + [dest]
            for j in available_moves(board, dest, False, path):
                yield j

def all_moves(board, peg_id):
    """All legal moves for all the player's pegs."""
    for i in peg_positions(board, peg_id):
        for move in available_moves(board, i):
            if is_valid_stop(move[-1], peg_id):
                yield move

def run_tests():
    board = '####1################11###############111##############1111#########             #####            ######           #######          ########         ########          #######           ######            #####             #########2222##############222###############22################2###'
    ma1 = list(all_moves(board, 1))
    ma2 = list(all_moves(board, 2))
    if len(ma1) != len(ma2):
        print "Players have different numbers of legal moves"
        print ma1, ma2
    if len([x for x in ma1 if len(x) > 2]) != 0:
        print 'Player 1 should at most be able to jump once'
        print ma1
    # Player 1 makes a jump
    board = '####1################11###############11 ##############1111#########        1    #####            ######           #######          ########         ########          #######           ######            #####             #########2222##############222###############22################2###'
    mb1 = list(all_moves(board, 1))
    mb2 = list(all_moves(board, 2))
    if len(ma2) != len(mb2):
        print 'Player 2 suddenly has more legal moves'
        print ma2, mb2
    if len(ma1) >= len(mb1):
        print "Player 1 did not get more moves"
        print ma1, mb1
    if len([x for x in mb1 if len(x) > 2]) == 0:
        print "Player 1 did not get any three-step jumps"
        print mb1
    board = '#### ################11############### 11##############1111#########    1 1      #####            ######           #######          ########         ########          #######           ######            #####    22       #########2222##############2  ###############22################2###'
    mc1 = list(all_moves(board, 1))
    print mc1
    print "ok"


if __name__ == "__main__":
    run_tests()
